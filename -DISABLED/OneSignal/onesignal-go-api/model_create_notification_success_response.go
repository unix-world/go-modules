/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// CreateNotificationSuccessResponse struct for CreateNotificationSuccessResponse
type CreateNotificationSuccessResponse struct {
	Id string `json:"id"`
	// Estimated number of subscribers targetted by notification.
	Recipients int32 `json:"recipients"`
	ExternalId *string `json:"external_id,omitempty"`
	Errors *Notification200Errors `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNotificationSuccessResponse CreateNotificationSuccessResponse

// NewCreateNotificationSuccessResponse instantiates a new CreateNotificationSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNotificationSuccessResponse(id string, recipients int32) *CreateNotificationSuccessResponse {
	this := CreateNotificationSuccessResponse{}
	this.Id = id
	this.Recipients = recipients
	return &this
}

// NewCreateNotificationSuccessResponseWithDefaults instantiates a new CreateNotificationSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNotificationSuccessResponseWithDefaults() *CreateNotificationSuccessResponse {
	this := CreateNotificationSuccessResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CreateNotificationSuccessResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateNotificationSuccessResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateNotificationSuccessResponse) SetId(v string) {
	o.Id = v
}

// GetRecipients returns the Recipients field value
func (o *CreateNotificationSuccessResponse) GetRecipients() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *CreateNotificationSuccessResponse) GetRecipientsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recipients, true
}

// SetRecipients sets field value
func (o *CreateNotificationSuccessResponse) SetRecipients(v int32) {
	o.Recipients = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *CreateNotificationSuccessResponse) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNotificationSuccessResponse) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *CreateNotificationSuccessResponse) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *CreateNotificationSuccessResponse) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CreateNotificationSuccessResponse) GetErrors() Notification200Errors {
	if o == nil || o.Errors == nil {
		var ret Notification200Errors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNotificationSuccessResponse) GetErrorsOk() (*Notification200Errors, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CreateNotificationSuccessResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given Notification200Errors and assigns it to the Errors field.
func (o *CreateNotificationSuccessResponse) SetErrors(v Notification200Errors) {
	o.Errors = &v
}

func (o CreateNotificationSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["recipients"] = o.Recipients
	}
	if o.ExternalId != nil {
		toSerialize["external_id"] = o.ExternalId
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateNotificationSuccessResponse) UnmarshalJSON(bytes []byte) (err error) {
	varCreateNotificationSuccessResponse := _CreateNotificationSuccessResponse{}

	if err = json.Unmarshal(bytes, &varCreateNotificationSuccessResponse); err == nil {
		*o = CreateNotificationSuccessResponse(varCreateNotificationSuccessResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "recipients")
		delete(additionalProperties, "external_id")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNotificationSuccessResponse struct {
	value *CreateNotificationSuccessResponse
	isSet bool
}

func (v NullableCreateNotificationSuccessResponse) Get() *CreateNotificationSuccessResponse {
	return v.value
}

func (v *NullableCreateNotificationSuccessResponse) Set(val *CreateNotificationSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNotificationSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNotificationSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNotificationSuccessResponse(val *CreateNotificationSuccessResponse) *NullableCreateNotificationSuccessResponse {
	return &NullableCreateNotificationSuccessResponse{value: val, isSet: true}
}

func (v NullableCreateNotificationSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNotificationSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


