/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// DeletePlayerBadRequestResponse struct for DeletePlayerBadRequestResponse
type DeletePlayerBadRequestResponse struct {
	Erorrs []bool `json:"erorrs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeletePlayerBadRequestResponse DeletePlayerBadRequestResponse

// NewDeletePlayerBadRequestResponse instantiates a new DeletePlayerBadRequestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePlayerBadRequestResponse() *DeletePlayerBadRequestResponse {
	this := DeletePlayerBadRequestResponse{}
	return &this
}

// NewDeletePlayerBadRequestResponseWithDefaults instantiates a new DeletePlayerBadRequestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePlayerBadRequestResponseWithDefaults() *DeletePlayerBadRequestResponse {
	this := DeletePlayerBadRequestResponse{}
	return &this
}

// GetErorrs returns the Erorrs field value if set, zero value otherwise.
func (o *DeletePlayerBadRequestResponse) GetErorrs() []bool {
	if o == nil || o.Erorrs == nil {
		var ret []bool
		return ret
	}
	return o.Erorrs
}

// GetErorrsOk returns a tuple with the Erorrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePlayerBadRequestResponse) GetErorrsOk() ([]bool, bool) {
	if o == nil || o.Erorrs == nil {
		return nil, false
	}
	return o.Erorrs, true
}

// HasErorrs returns a boolean if a field has been set.
func (o *DeletePlayerBadRequestResponse) HasErorrs() bool {
	if o != nil && o.Erorrs != nil {
		return true
	}

	return false
}

// SetErorrs gets a reference to the given []bool and assigns it to the Erorrs field.
func (o *DeletePlayerBadRequestResponse) SetErorrs(v []bool) {
	o.Erorrs = v
}

func (o DeletePlayerBadRequestResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Erorrs != nil {
		toSerialize["erorrs"] = o.Erorrs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeletePlayerBadRequestResponse) UnmarshalJSON(bytes []byte) (err error) {
	varDeletePlayerBadRequestResponse := _DeletePlayerBadRequestResponse{}

	if err = json.Unmarshal(bytes, &varDeletePlayerBadRequestResponse); err == nil {
		*o = DeletePlayerBadRequestResponse(varDeletePlayerBadRequestResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "erorrs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeletePlayerBadRequestResponse struct {
	value *DeletePlayerBadRequestResponse
	isSet bool
}

func (v NullableDeletePlayerBadRequestResponse) Get() *DeletePlayerBadRequestResponse {
	return v.value
}

func (v *NullableDeletePlayerBadRequestResponse) Set(val *DeletePlayerBadRequestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePlayerBadRequestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePlayerBadRequestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePlayerBadRequestResponse(val *DeletePlayerBadRequestResponse) *NullableDeletePlayerBadRequestResponse {
	return &NullableDeletePlayerBadRequestResponse{value: val, isSet: true}
}

func (v NullableDeletePlayerBadRequestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePlayerBadRequestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


