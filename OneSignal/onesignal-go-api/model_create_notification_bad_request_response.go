/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// CreateNotificationBadRequestResponse struct for CreateNotificationBadRequestResponse
type CreateNotificationBadRequestResponse struct {
	Errors []string `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNotificationBadRequestResponse CreateNotificationBadRequestResponse

// NewCreateNotificationBadRequestResponse instantiates a new CreateNotificationBadRequestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNotificationBadRequestResponse() *CreateNotificationBadRequestResponse {
	this := CreateNotificationBadRequestResponse{}
	return &this
}

// NewCreateNotificationBadRequestResponseWithDefaults instantiates a new CreateNotificationBadRequestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNotificationBadRequestResponseWithDefaults() *CreateNotificationBadRequestResponse {
	this := CreateNotificationBadRequestResponse{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CreateNotificationBadRequestResponse) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNotificationBadRequestResponse) GetErrorsOk() ([]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CreateNotificationBadRequestResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *CreateNotificationBadRequestResponse) SetErrors(v []string) {
	o.Errors = v
}

func (o CreateNotificationBadRequestResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateNotificationBadRequestResponse) UnmarshalJSON(bytes []byte) (err error) {
	varCreateNotificationBadRequestResponse := _CreateNotificationBadRequestResponse{}

	if err = json.Unmarshal(bytes, &varCreateNotificationBadRequestResponse); err == nil {
		*o = CreateNotificationBadRequestResponse(varCreateNotificationBadRequestResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNotificationBadRequestResponse struct {
	value *CreateNotificationBadRequestResponse
	isSet bool
}

func (v NullableCreateNotificationBadRequestResponse) Get() *CreateNotificationBadRequestResponse {
	return v.value
}

func (v *NullableCreateNotificationBadRequestResponse) Set(val *CreateNotificationBadRequestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNotificationBadRequestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNotificationBadRequestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNotificationBadRequestResponse(val *CreateNotificationBadRequestResponse) *NullableCreateNotificationBadRequestResponse {
	return &NullableCreateNotificationBadRequestResponse{value: val, isSet: true}
}

func (v NullableCreateNotificationBadRequestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNotificationBadRequestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


